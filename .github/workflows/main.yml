name: Release Actions

on:
  workflow_dispatch:
    inputs:
      release_tag:
        description: 'Tag for the release (e.g., v0.22.0)'
        required: true
        type: string

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read repositories list
        id: read_repos
        run: |
          repos=$(cat .kestra_actions_repository | tr '\n' ',')
          repos=${repos%,} # Remove the trailing comma
          echo "REPOSITORIES=$repos" >> $GITHUB_OUTPUT

      - name: Create new release for each actions
        uses: actions/github-script@v7
        env:
          GITHUB_TOKEN: ${{ secrets.GH_PERSONAL_TOKEN }}
        with:
          github-token: ${{ secrets.GH_PERSONAL_TOKEN }}
          script: |
            const fs = require('fs');

            const tag = "${{ github.event.inputs.release_tag }}";
            const repos = "${{ steps.read_repos.outputs.REPOSITORIES }}".split(',').filter(repo => repo);

            for (const repo of repos) {
              const [owner, repoName] = repo.split('/');
              const branchName = `releases/${tag}`;
              console.log(`Processing repository: ${repo}`);

              // Clone the repository
              await exec.exec('git', ['clone', `https://github.com/${repo}.git`, repoName]);
              process.chdir(repoName);

              // Create and checkout the release branch
              await exec.exec('git', ['checkout', '-b', branchName]);

              // Modify Dockerfile
              const dockerfile = fs.readFileSync('Dockerfile', 'utf8');
              const updatedDockerfile = dockerfile.replace(/latest/g, tag);
              fs.writeFileSync('Dockerfile', updatedDockerfile);

              // Commit changes
              await exec.exec('git', ['config', 'user.email', 'actions@github.com']);
              await exec.exec('git', ['config', 'user.name', 'GitHub Actions']);
              await exec.exec('git', ['add', 'Dockerfile']);
              await exec.exec('git', ['commit', '-m', `Update Dockerfile to use tag ${tag}`]);

              // Set Remote URL with PAT
              await exec.exec('git', ['remote', 'set-url', 'origin', `https://kestra-io:${{ secrets.GH_PERSONAL_TOKEN }}@github.com/${repo}.git`]);

              // Push branch and tag
              await exec.exec('git', ['tag', tag]);
              await exec.exec('git', ['push', 'origin', branchName, '--force']);
              await exec.exec('git', ['push', 'origin', tag]);

              // Create release
              await github.rest.repos.createRelease({
                owner,
                repo: repoName,
                tag_name: tag,
                name: tag,
                body: `Release ${tag} for ${repo}`,
                draft: false,
                prerelease: false,
                make_latest: "legacy"
              });

              process.chdir('..'); // Move back to the releaser repo directory
              await exec.exec('rm', ['-rf', repoName]); //clean up the cloned repo
            }